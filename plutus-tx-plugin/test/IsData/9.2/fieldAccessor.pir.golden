let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
    Tuple2 : a -> b -> Tuple2 a b
in
\(r : (\a -> data) integer) ->
  Tuple2_match
    {integer}
    {list data}
    ((let
         b = list data
       in
       \(tup : pair integer b) ->
         Tuple2
           {integer}
           {b}
           (fstPair {integer} {b} tup)
           (sndPair {integer} {b} tup))
       (unConstrData r))
    {integer}
    (\(ds : integer) (ds : list data) ->
       ifThenElse
         {all dead. integer}
         (equalsInteger 0 ds)
         (/\dead ->
            let
              !ds : integer = unIData (headList {data} (tailList {data} ds))
            in
            unIData (headList {data} ds))
         (/\dead -> error {integer})
         {all dead. dead})