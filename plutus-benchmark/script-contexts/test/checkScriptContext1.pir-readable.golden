(let
    data Credential | Credential_match where
      PubKeyCredential : bytestring -> Credential
      ScriptCredential : bytestring -> Credential
    data StakingCredential | StakingCredential_match where
      StakingHash : Credential -> StakingCredential
      StakingPtr : integer -> integer -> integer -> StakingCredential
    data (Maybe :: * -> *) a | Maybe_match where
      Just : a -> Maybe a
      Nothing : Maybe a
    data Address | Address_match where
      Address : Credential -> Maybe StakingCredential -> Address
    data OutputDatum | OutputDatum_match where
      NoOutputDatum : OutputDatum
      OutputDatum : data -> OutputDatum
      OutputDatumHash : bytestring -> OutputDatum
    data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
      Tuple2 : a -> b -> Tuple2 a b
  in
  letrec
    data (List :: * -> *) a | List_match where
      Nil : List a
      Cons : a -> List a -> List a
  in
  let
    data TxOut | TxOut_match where
      TxOut :
        Address ->
        (\k v -> List (Tuple2 k v))
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring integer) ->
        OutputDatum ->
        Maybe bytestring ->
        TxOut
  in
  letrec
    !go : List TxOut -> integer
      = \(ds : List TxOut) ->
          List_match
            {TxOut}
            ds
            {all dead. integer}
            (/\dead -> 0)
            (\(x : TxOut) (xs : List TxOut) -> /\dead -> addInteger 1 (go xs))
            {all dead. dead}
  in
  let
    !`$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData` : data -> data
      = \(d : data) -> d
    !reconstructCaseError : string = "PT1"
    data Unit | Unit_match where
      Unit : Unit
    !traceError : all a. string -> a
      = /\a ->
          \(str : string) -> let !x : Unit = trace {Unit} str Unit in error {a}
    data Bool | Bool_match where
      True : Bool
      False : Bool
    !`$fUnsafeFromDataBool_$cunsafeFromBuiltinData` : data -> Bool
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. Bool}
            (/\dead -> False)
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (equalsInteger 1 index) True False)
                 {all dead. Bool}
                 (/\dead -> True)
                 (/\dead -> traceError {Bool} reconstructCaseError)
                 {all dead. dead})
            {all dead. dead}
    data (Extended :: * -> *) a | Extended_match where
      Finite : a -> Extended a
      NegInf : Extended a
      PosInf : Extended a
    !`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> Extended a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
            let
              !tup : pair integer (list data) = unConstrData d
              !index : integer = fstPair {integer} {list data} tup
              !args : list data = sndPair {integer} {list data} tup
            in
            Bool_match
              (ifThenElse {Bool} (equalsInteger 0 index) True False)
              {all dead. Extended a}
              (/\dead -> NegInf {a})
              (/\dead ->
                 Bool_match
                   (ifThenElse {Bool} (equalsInteger 1 index) True False)
                   {all dead. Extended a}
                   (/\dead ->
                      Finite {a} (`$dUnsafeFromData` (headList {data} args)))
                   (/\dead ->
                      Bool_match
                        (ifThenElse {Bool} (equalsInteger 2 index) True False)
                        {all dead. Extended a}
                        (/\dead -> PosInf {a})
                        (/\dead -> traceError {Extended a} reconstructCaseError)
                        {all dead. dead})
                   {all dead. dead})
              {all dead. dead}
    !`$fUnsafeFromDataTxId_$cunsafeFromBuiltinData` : data -> bytestring
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. bytestring}
            (/\dead -> unBData (headList {data} args))
            (/\dead -> traceError {bytestring} reconstructCaseError)
            {all dead. dead}
    data GovernanceActionId | GovernanceActionId_match where
      GovernanceActionId : bytestring -> integer -> GovernanceActionId
    !`$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData` :
       data -> GovernanceActionId
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. GovernanceActionId}
            (/\dead ->
               GovernanceActionId
                 (`$fUnsafeFromDataTxId_$cunsafeFromBuiltinData`
                    (headList {data} args))
                 (unIData (headList {data} (tailList {data} args))))
            (/\dead -> traceError {GovernanceActionId} reconstructCaseError)
            {all dead. dead}
    data TxOutRef | TxOutRef_match where
      TxOutRef : bytestring -> integer -> TxOutRef
    !`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData` : data -> TxOutRef
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. TxOutRef}
            (/\dead ->
               TxOutRef
                 (`$fUnsafeFromDataTxId_$cunsafeFromBuiltinData`
                    (headList {data} args))
                 (unIData (headList {data} (tailList {data} args))))
            (/\dead -> traceError {TxOutRef} reconstructCaseError)
            {all dead. dead}
    !`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` : data -> Credential
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. Credential}
            (/\dead -> PubKeyCredential (unBData (headList {data} args)))
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (equalsInteger 1 index) True False)
                 {all dead. Credential}
                 (/\dead -> ScriptCredential (unBData (headList {data} args)))
                 (/\dead -> traceError {Credential} reconstructCaseError)
                 {all dead. dead})
            {all dead. dead}
    data DRep | DRep_match where
      DRep : Credential -> DRep
      DRepAlwaysAbstain : DRep
      DRepAlwaysNoConfidence : DRep
    !`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData` : data -> DRep
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. DRep}
            (/\dead ->
               DRep
                 (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                    (headList {data} args)))
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (equalsInteger 1 index) True False)
                 {all dead. DRep}
                 (/\dead -> DRepAlwaysAbstain)
                 (/\dead ->
                    Bool_match
                      (ifThenElse {Bool} (equalsInteger 2 index) True False)
                      {all dead. DRep}
                      (/\dead -> DRepAlwaysNoConfidence)
                      (/\dead -> traceError {DRep} reconstructCaseError)
                      {all dead. dead})
                 {all dead. dead})
            {all dead. dead}
    data Delegatee | Delegatee_match where
      DelegStake : bytestring -> Delegatee
      DelegStakeVote : bytestring -> DRep -> Delegatee
      DelegVote : DRep -> Delegatee
    !`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData` : data -> Delegatee
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. Delegatee}
            (/\dead -> DelegStake (unBData (headList {data} args)))
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (equalsInteger 1 index) True False)
                 {all dead. Delegatee}
                 (/\dead ->
                    DelegVote
                      (`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData`
                         (headList {data} args)))
                 (/\dead ->
                    Bool_match
                      (ifThenElse {Bool} (equalsInteger 2 index) True False)
                      {all dead. Delegatee}
                      (/\dead ->
                         DelegStakeVote
                           (unBData (headList {data} args))
                           (`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData`
                              (headList {data} (tailList {data} args))))
                      (/\dead -> traceError {Delegatee} reconstructCaseError)
                      {all dead. dead})
                 {all dead. dead})
            {all dead. dead}
    !`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> Maybe a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
            let
              !tup : pair integer (list data) = unConstrData d
              !index : integer = fstPair {integer} {list data} tup
              !args : list data = sndPair {integer} {list data} tup
            in
            Bool_match
              (ifThenElse {Bool} (equalsInteger 1 index) True False)
              {all dead. Maybe a}
              (/\dead -> Nothing {a})
              (/\dead ->
                 Bool_match
                   (ifThenElse {Bool} (equalsInteger 0 index) True False)
                   {all dead. Maybe a}
                   (/\dead ->
                      Just {a} (`$dUnsafeFromData` (headList {data} args)))
                   (/\dead -> traceError {Maybe a} reconstructCaseError)
                   {all dead. dead})
              {all dead. dead}
    !`$fUnsafeFromDataMap_$cunsafeFromBuiltinData` :
       all k v.
         (\a -> data -> a) k ->
         (\a -> data -> a) v ->
         data ->
         (\k v -> List (Tuple2 k v)) k v
      = /\k v ->
          \(`$dUnsafeFromData` : (\a -> data -> a) k)
           (`$dUnsafeFromData` : (\a -> data -> a) v) ->
            letrec
              !go : list (pair data data) -> List (Tuple2 k v)
                = \(l : list (pair data data)) ->
                    chooseList
                      {pair data data}
                      {Unit -> List (Tuple2 k v)}
                      l
                      (\(ds : Unit) -> Nil {Tuple2 k v})
                      (\(ds : Unit) ->
                         let
                           !tup : pair data data = headList {pair data data} l
                         in
                         Cons
                           {Tuple2 k v}
                           (Tuple2
                              {k}
                              {v}
                              (`$dUnsafeFromData` (fstPair {data} {data} tup))
                              (`$dUnsafeFromData` (sndPair {data} {data} tup)))
                           (go (tailList {pair data data} l)))
                      Unit
            in
            \(d : data) -> go (unMapData d)
    ~`$fUnsafeFromDataValue` :
       data -> (\k v -> List (Tuple2 k v)) bytestring integer
      = `$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
          {bytestring}
          {integer}
          unBData
          unIData
    ~`$fUnsafeFromDataValue` :
       data ->
       (\k v -> List (Tuple2 k v))
         bytestring
         ((\k v -> List (Tuple2 k v)) bytestring integer)
      = `$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
          {bytestring}
          {(\k v -> List (Tuple2 k v)) bytestring integer}
          unBData
          `$fUnsafeFromDataValue`
    data TxCert | TxCert_match where
      TxCertAuthHotCommittee : Credential -> Credential -> TxCert
      TxCertDelegStaking : Credential -> Delegatee -> TxCert
      TxCertRegDRep :
        Credential ->
        (\k v -> List (Tuple2 k v))
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring integer) ->
        TxCert
      TxCertRegDeleg :
        Credential ->
        Delegatee ->
        (\k v -> List (Tuple2 k v))
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring integer) ->
        TxCert
      TxCertRegStaking :
        Credential ->
        Maybe
          ((\k v -> List (Tuple2 k v))
             bytestring
             ((\k v -> List (Tuple2 k v)) bytestring integer)) ->
        TxCert
      TxCertResignColdCommittee : Credential -> TxCert
      TxCertUnRegDRep :
        Credential ->
        (\k v -> List (Tuple2 k v))
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring integer) ->
        TxCert
      TxCertUnRegStaking :
        Credential ->
        Maybe
          ((\k v -> List (Tuple2 k v))
             bytestring
             ((\k v -> List (Tuple2 k v)) bytestring integer)) ->
        TxCert
      TxCertUpdateDRep : Credential -> TxCert
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` :
       data -> TxCert
      = \(eta : data) ->
          let
            !tup : pair integer (list data) = unConstrData eta
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. TxCert}
            (/\dead ->
               TxCertRegStaking
                 (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                    (headList {data} args))
                 (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                    {(\k v -> List (Tuple2 k v))
                       bytestring
                       ((\k v -> List (Tuple2 k v)) bytestring integer)}
                    `$fUnsafeFromDataValue`
                    (headList {data} (tailList {data} args))))
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (equalsInteger 1 index) True False)
                 {all dead. TxCert}
                 (/\dead ->
                    TxCertUnRegStaking
                      (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                         (headList {data} args))
                      (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                         {(\k v -> List (Tuple2 k v))
                            bytestring
                            ((\k v -> List (Tuple2 k v)) bytestring integer)}
                         `$fUnsafeFromDataValue`
                         (headList {data} (tailList {data} args))))
                 (/\dead ->
                    Bool_match
                      (ifThenElse {Bool} (equalsInteger 2 index) True False)
                      {all dead. TxCert}
                      (/\dead ->
                         TxCertDelegStaking
                           (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                              (headList {data} args))
                           (`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData`
                              (headList {data} (tailList {data} args))))
                      (/\dead ->
                         Bool_match
                           (ifThenElse
                              {Bool}
                              (equalsInteger 3 index)
                              True
                              False)
                           {all dead. TxCert}
                           (/\dead ->
                              let
                                !l : list data = tailList {data} args
                              in
                              TxCertRegDeleg
                                (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                   (headList {data} args))
                                (`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData`
                                   (headList {data} l))
                                (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                   {bytestring}
                                   {(\k v -> List (Tuple2 k v))
                                      bytestring
                                      integer}
                                   unBData
                                   `$fUnsafeFromDataValue`
                                   (headList {data} (tailList {data} l))))
                           (/\dead ->
                              Bool_match
                                (ifThenElse
                                   {Bool}
                                   (equalsInteger 4 index)
                                   True
                                   False)
                                {all dead. TxCert}
                                (/\dead ->
                                   TxCertRegDRep
                                     (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                        (headList {data} args))
                                     (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                        {bytestring}
                                        {(\k v -> List (Tuple2 k v))
                                           bytestring
                                           integer}
                                        unBData
                                        `$fUnsafeFromDataValue`
                                        (headList
                                           {data}
                                           (tailList {data} args))))
                                (/\dead ->
                                   Bool_match
                                     (ifThenElse
                                        {Bool}
                                        (equalsInteger 5 index)
                                        True
                                        False)
                                     {all dead. TxCert}
                                     (/\dead ->
                                        TxCertUpdateDRep
                                          (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                             (headList {data} args)))
                                     (/\dead ->
                                        Bool_match
                                          (ifThenElse
                                             {Bool}
                                             (equalsInteger 6 index)
                                             True
                                             False)
                                          {all dead. TxCert}
                                          (/\dead ->
                                             TxCertUnRegDRep
                                               (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                  (headList {data} args))
                                               (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                                  {bytestring}
                                                  {(\k v -> List (Tuple2 k v))
                                                     bytestring
                                                     integer}
                                                  unBData
                                                  `$fUnsafeFromDataValue`
                                                  (headList
                                                     {data}
                                                     (tailList {data} args))))
                                          (/\dead ->
                                             Bool_match
                                               (ifThenElse
                                                  {Bool}
                                                  (equalsInteger 7 index)
                                                  True
                                                  False)
                                               {all dead. TxCert}
                                               (/\dead ->
                                                  TxCertAuthHotCommittee
                                                    (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                       (headList {data} args))
                                                    (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                       (headList
                                                          {data}
                                                          (tailList
                                                             {data}
                                                             args))))
                                               (/\dead ->
                                                  Bool_match
                                                    (ifThenElse
                                                       {Bool}
                                                       (equalsInteger 8 index)
                                                       True
                                                       False)
                                                    {all dead. TxCert}
                                                    (/\dead ->
                                                       TxCertResignColdCommittee
                                                         (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                            (headList
                                                               {data}
                                                               args)))
                                                    (/\dead ->
                                                       traceError
                                                         {TxCert}
                                                         reconstructCaseError)
                                                    {all dead. dead})
                                               {all dead. dead})
                                          {all dead. dead})
                                     {all dead. dead})
                                {all dead. dead})
                           {all dead. dead})
                      {all dead. dead})
                 {all dead. dead})
            {all dead. dead}
    data Voter | Voter_match where
      CommitteeVoter : Credential -> Voter
      DRepVoter : Credential -> Voter
      StakePoolVoter : bytestring -> Voter
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` : data -> Voter
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. Voter}
            (/\dead ->
               CommitteeVoter
                 (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                    (headList {data} args)))
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (equalsInteger 1 index) True False)
                 {all dead. Voter}
                 (/\dead ->
                    DRepVoter
                      (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                         (headList {data} args)))
                 (/\dead ->
                    Bool_match
                      (ifThenElse {Bool} (equalsInteger 2 index) True False)
                      {all dead. Voter}
                      (/\dead ->
                         StakePoolVoter (unBData (headList {data} args)))
                      (/\dead -> traceError {Voter} reconstructCaseError)
                      {all dead. dead})
                 {all dead. dead})
            {all dead. dead}
    data ScriptPurpose | ScriptPurpose_match where
      Certifying : TxCert -> ScriptPurpose
      Minting : bytestring -> ScriptPurpose
      Proposing : integer -> ScriptPurpose
      Rewarding : Credential -> ScriptPurpose
      Spending : TxOutRef -> ScriptPurpose
      Voting : Voter -> GovernanceActionId -> ScriptPurpose
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` :
       data -> ScriptPurpose
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. ScriptPurpose}
            (/\dead -> Minting (unBData (headList {data} args)))
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (equalsInteger 1 index) True False)
                 {all dead. ScriptPurpose}
                 (/\dead ->
                    Spending
                      (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData`
                         (headList {data} args)))
                 (/\dead ->
                    Bool_match
                      (ifThenElse {Bool} (equalsInteger 2 index) True False)
                      {all dead. ScriptPurpose}
                      (/\dead ->
                         Rewarding
                           (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                              (headList {data} args)))
                      (/\dead ->
                         Bool_match
                           (ifThenElse
                              {Bool}
                              (equalsInteger 3 index)
                              True
                              False)
                           {all dead. ScriptPurpose}
                           (/\dead ->
                              Certifying
                                (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                   (headList {data} args)))
                           (/\dead ->
                              Bool_match
                                (ifThenElse
                                   {Bool}
                                   (equalsInteger 4 index)
                                   True
                                   False)
                                {all dead. ScriptPurpose}
                                (/\dead ->
                                   Voting
                                     (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                        (headList {data} args))
                                     (`$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                        (headList
                                           {data}
                                           (tailList {data} args))))
                                (/\dead ->
                                   Bool_match
                                     (ifThenElse
                                        {Bool}
                                        (equalsInteger 5 index)
                                        True
                                        False)
                                     {all dead. ScriptPurpose}
                                     (/\dead ->
                                        Proposing
                                          (unIData (headList {data} args)))
                                     (/\dead ->
                                        traceError
                                          {ScriptPurpose}
                                          reconstructCaseError)
                                     {all dead. dead})
                                {all dead. dead})
                           {all dead. dead})
                      {all dead. dead})
                 {all dead. dead})
            {all dead. dead}
    !`$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData` :
       data -> TxOut
      = \(eta : data) ->
          let
            !tup : pair integer (list data) = unConstrData eta
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. TxOut}
            (/\dead ->
               let
                 !l : list data = tailList {data} args
                 !l : list data = tailList {data} l
               in
               TxOut
                 (let
                   !tup : pair integer (list data)
                     = unConstrData (headList {data} args)
                   !index : integer = fstPair {integer} {list data} tup
                   !args : list data = sndPair {integer} {list data} tup
                 in
                 Bool_match
                   (ifThenElse {Bool} (equalsInteger 0 index) True False)
                   {all dead. Address}
                   (/\dead ->
                      Address
                        (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                           (headList {data} args))
                        (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                           {StakingCredential}
                           (\(d : data) ->
                              let
                                !tup : pair integer (list data) = unConstrData d
                                !index : integer
                                  = fstPair {integer} {list data} tup
                                !args : list data
                                  = sndPair {integer} {list data} tup
                              in
                              Bool_match
                                (ifThenElse
                                   {Bool}
                                   (equalsInteger 0 index)
                                   True
                                   False)
                                {all dead. StakingCredential}
                                (/\dead ->
                                   StakingHash
                                     (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                        (headList {data} args)))
                                (/\dead ->
                                   Bool_match
                                     (ifThenElse
                                        {Bool}
                                        (equalsInteger 1 index)
                                        True
                                        False)
                                     {all dead. StakingCredential}
                                     (/\dead ->
                                        let
                                          !l : list data = tailList {data} args
                                        in
                                        StakingPtr
                                          (unIData (headList {data} args))
                                          (unIData (headList {data} l))
                                          (unIData
                                             (headList
                                                {data}
                                                (tailList {data} l))))
                                     (/\dead ->
                                        traceError
                                          {StakingCredential}
                                          reconstructCaseError)
                                     {all dead. dead})
                                {all dead. dead})
                           (headList {data} (tailList {data} args))))
                   (/\dead -> traceError {Address} reconstructCaseError)
                   {all dead. dead})
                 (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                    {bytestring}
                    {(\k v -> List (Tuple2 k v)) bytestring integer}
                    unBData
                    `$fUnsafeFromDataValue`
                    (headList {data} l))
                 (let
                   !tup : pair integer (list data)
                     = unConstrData (headList {data} l)
                   !index : integer = fstPair {integer} {list data} tup
                   !args : list data = sndPair {integer} {list data} tup
                 in
                 Bool_match
                   (ifThenElse {Bool} (equalsInteger 0 index) True False)
                   {all dead. OutputDatum}
                   (/\dead -> NoOutputDatum)
                   (/\dead ->
                      Bool_match
                        (ifThenElse {Bool} (equalsInteger 1 index) True False)
                        {all dead. OutputDatum}
                        (/\dead ->
                           OutputDatumHash (unBData (headList {data} args)))
                        (/\dead ->
                           Bool_match
                             (ifThenElse
                                {Bool}
                                (equalsInteger 2 index)
                                True
                                False)
                             {all dead. OutputDatum}
                             (/\dead -> OutputDatum (headList {data} args))
                             (/\dead ->
                                traceError {OutputDatum} reconstructCaseError)
                             {all dead. dead})
                        {all dead. dead})
                   {all dead. dead})
                 (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                    {bytestring}
                    unBData
                    (headList {data} (tailList {data} l))))
            (/\dead -> traceError {TxOut} reconstructCaseError)
            {all dead. dead}
    data TxInInfo | TxInInfo_match where
      TxInInfo : TxOutRef -> TxOut -> TxInInfo
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` : data -> TxInInfo
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. TxInInfo}
            (/\dead ->
               TxInInfo
                 (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData`
                    (headList {data} args))
                 (`$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData`
                    (headList {data} (tailList {data} args))))
            (/\dead -> traceError {TxInInfo} reconstructCaseError)
            {all dead. dead}
    !`$fUnsafeFromDataNil_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> List a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) ->
            letrec
              !go : list data -> List a
                = \(l : list data) ->
                    chooseList
                      {data}
                      {Unit -> List a}
                      l
                      (\(ds : Unit) -> Nil {a})
                      (\(ds : Unit) ->
                         Cons
                           {a}
                           (`$dUnsafeFromData` (headList {data} l))
                           (go (tailList {data} l)))
                      Unit
            in
            \(d : data) -> go (unListData d)
    data (LowerBound :: * -> *) a | LowerBound_match where
      LowerBound : Extended a -> Bool -> LowerBound a
    data (UpperBound :: * -> *) a | UpperBound_match where
      UpperBound : Extended a -> Bool -> UpperBound a
    data (Interval :: * -> *) a | Interval_match where
      Interval : LowerBound a -> UpperBound a -> Interval a
    data Rational | Rational_match where
      Rational : integer -> integer -> Rational
    data Committee | Committee_match where
      Committee :
        (\k v -> List (Tuple2 k v)) Credential integer -> Rational -> Committee
    data ProtocolVersion | ProtocolVersion_match where
      ProtocolVersion : integer -> integer -> ProtocolVersion
    data GovernanceAction | GovernanceAction_match where
      HardForkInitiation :
        Maybe GovernanceActionId -> ProtocolVersion -> GovernanceAction
      InfoAction : GovernanceAction
      NewCommittee :
        Maybe GovernanceActionId ->
        List Credential ->
        Committee ->
        GovernanceAction
      NewConstitution :
        Maybe GovernanceActionId -> Maybe bytestring -> GovernanceAction
      NoConfidence : Maybe GovernanceActionId -> GovernanceAction
      ParameterChange : Maybe GovernanceActionId -> data -> GovernanceAction
      TreasuryWithdrawals :
        (\k v -> List (Tuple2 k v))
          Credential
          ((\k v -> List (Tuple2 k v))
             bytestring
             ((\k v -> List (Tuple2 k v)) bytestring integer)) ->
        GovernanceAction
    data ProposalProcedure | ProposalProcedure_match where
      ProposalProcedure :
        (\k v -> List (Tuple2 k v))
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring integer) ->
        Credential ->
        GovernanceAction ->
        ProposalProcedure
    data Vote | Vote_match where
      Abstain : Vote
      VoteNo : Vote
      VoteYes : Vote
    data TxInfo | TxInfo_match where
      TxInfo :
        List TxInInfo ->
        List TxInInfo ->
        List TxOut ->
        (\k v -> List (Tuple2 k v))
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring integer) ->
        (\k v -> List (Tuple2 k v))
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring integer) ->
        List TxCert ->
        (\k v -> List (Tuple2 k v)) Credential integer ->
        Interval integer ->
        List bytestring ->
        (\k v -> List (Tuple2 k v)) ScriptPurpose data ->
        (\k v -> List (Tuple2 k v)) bytestring data ->
        bytestring ->
        (\k v -> List (Tuple2 k v))
          Voter
          ((\k v -> List (Tuple2 k v)) GovernanceActionId Vote) ->
        List ProposalProcedure ->
        Maybe
          ((\k v -> List (Tuple2 k v))
             bytestring
             ((\k v -> List (Tuple2 k v)) bytestring integer)) ->
        Maybe
          ((\k v -> List (Tuple2 k v))
             bytestring
             ((\k v -> List (Tuple2 k v)) bytestring integer)) ->
        TxInfo
    data ScriptContext | ScriptContext_match where
      ScriptContext : TxInfo -> ScriptPurpose -> ScriptContext
    !`$fAdditiveMonoidInteger_$czero` : integer = 0
  in
  letrec
    !euclid : integer -> integer -> integer
      = \(x : integer) (y : integer) ->
          Bool_match
            (ifThenElse
               {Bool}
               (equalsInteger y `$fAdditiveMonoidInteger_$czero`)
               True
               False)
            {all dead. integer}
            (/\dead -> x)
            (/\dead -> euclid y (modInteger x y))
            {all dead. dead}
  in
  letrec
    !unsafeRatio : integer -> integer -> Rational
      = \(n : integer) (d : integer) ->
          Bool_match
            (ifThenElse
               {Bool}
               (equalsInteger d `$fAdditiveMonoidInteger_$czero`)
               True
               False)
            {all dead. Rational}
            (/\dead -> error {Rational})
            (/\dead ->
               Bool_match
                 (ifThenElse
                    {Bool}
                    (lessThanInteger d `$fAdditiveMonoidInteger_$czero`)
                    True
                    False)
                 {all dead. Rational}
                 (/\dead ->
                    unsafeRatio
                      (subtractInteger `$fAdditiveMonoidInteger_$czero` n)
                      (subtractInteger `$fAdditiveMonoidInteger_$czero` d))
                 (/\dead ->
                    let
                      !gcd' : integer = euclid n d
                      !dt : integer = quotientInteger d gcd'
                    in
                    Rational (quotientInteger n gcd') dt)
                 {all dead. dead})
            {all dead. dead}
  in
  \(d : data) ->
    ScriptContext_match
      (let
        !tup : pair integer (list data) = unConstrData d
        !index : integer = fstPair {integer} {list data} tup
        !args : list data = sndPair {integer} {list data} tup
      in
      Bool_match
        (ifThenElse {Bool} (equalsInteger 0 index) True False)
        {all dead. ScriptContext}
        (/\dead ->
           ScriptContext
             (let
               !tup : pair integer (list data)
                 = unConstrData (headList {data} args)
               !index : integer = fstPair {integer} {list data} tup
               !args : list data = sndPair {integer} {list data} tup
             in
             Bool_match
               (ifThenElse {Bool} (equalsInteger 0 index) True False)
               {all dead. TxInfo}
               (/\dead ->
                  let
                    !l : list data = tailList {data} args
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                  in
                  TxInfo
                    (`$fUnsafeFromDataNil_$cunsafeFromBuiltinData`
                       {TxInInfo}
                       `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                       (headList {data} args))
                    (`$fUnsafeFromDataNil_$cunsafeFromBuiltinData`
                       {TxInInfo}
                       `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                       (headList {data} l))
                    (`$fUnsafeFromDataNil_$cunsafeFromBuiltinData`
                       {TxOut}
                       `$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData`
                       (headList {data} l))
                    (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                       {bytestring}
                       {(\k v -> List (Tuple2 k v)) bytestring integer}
                       unBData
                       `$fUnsafeFromDataValue`
                       (headList {data} l))
                    (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                       {bytestring}
                       {(\k v -> List (Tuple2 k v)) bytestring integer}
                       unBData
                       `$fUnsafeFromDataValue`
                       (headList {data} l))
                    (`$fUnsafeFromDataNil_$cunsafeFromBuiltinData`
                       {TxCert}
                       `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                       (headList {data} l))
                    (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                       {Credential}
                       {integer}
                       `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                       unIData
                       (headList {data} l))
                    (let
                      !tup : pair integer (list data)
                        = unConstrData (headList {data} l)
                      !index : integer = fstPair {integer} {list data} tup
                      !args : list data = sndPair {integer} {list data} tup
                    in
                    Bool_match
                      (ifThenElse {Bool} (equalsInteger 0 index) True False)
                      {all dead. Interval integer}
                      (/\dead ->
                         Interval
                           {integer}
                           (let
                             !tup : pair integer (list data)
                               = unConstrData (headList {data} args)
                             !index : integer
                               = fstPair {integer} {list data} tup
                             !args : list data
                               = sndPair {integer} {list data} tup
                           in
                           Bool_match
                             (ifThenElse
                                {Bool}
                                (equalsInteger 0 index)
                                True
                                False)
                             {all dead. LowerBound integer}
                             (/\dead ->
                                LowerBound
                                  {integer}
                                  (`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData`
                                     {integer}
                                     unIData
                                     (headList {data} args))
                                  (`$fUnsafeFromDataBool_$cunsafeFromBuiltinData`
                                     (headList {data} (tailList {data} args))))
                             (/\dead ->
                                traceError
                                  {LowerBound integer}
                                  reconstructCaseError)
                             {all dead. dead})
                           (let
                             !tup : pair integer (list data)
                               = unConstrData
                                   (headList {data} (tailList {data} args))
                             !index : integer
                               = fstPair {integer} {list data} tup
                             !args : list data
                               = sndPair {integer} {list data} tup
                           in
                           Bool_match
                             (ifThenElse
                                {Bool}
                                (equalsInteger 0 index)
                                True
                                False)
                             {all dead. UpperBound integer}
                             (/\dead ->
                                UpperBound
                                  {integer}
                                  (`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData`
                                     {integer}
                                     unIData
                                     (headList {data} args))
                                  (`$fUnsafeFromDataBool_$cunsafeFromBuiltinData`
                                     (headList {data} (tailList {data} args))))
                             (/\dead ->
                                traceError
                                  {UpperBound integer}
                                  reconstructCaseError)
                             {all dead. dead}))
                      (/\dead ->
                         traceError {Interval integer} reconstructCaseError)
                      {all dead. dead})
                    (`$fUnsafeFromDataNil_$cunsafeFromBuiltinData`
                       {bytestring}
                       unBData
                       (headList {data} l))
                    (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                       {ScriptPurpose}
                       {data}
                       `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                       `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
                       (headList {data} l))
                    (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                       {bytestring}
                       {data}
                       unBData
                       `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
                       (headList {data} l))
                    (`$fUnsafeFromDataTxId_$cunsafeFromBuiltinData`
                       (headList {data} l))
                    (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                       {Voter}
                       {(\k v -> List (Tuple2 k v)) GovernanceActionId Vote}
                       `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                       (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                          {GovernanceActionId}
                          {Vote}
                          `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                          (\(d : data) ->
                             let
                               !tup : pair integer (list data) = unConstrData d
                               !index : integer
                                 = fstPair {integer} {list data} tup
                               !args : list data
                                 = sndPair {integer} {list data} tup
                             in
                             Bool_match
                               (ifThenElse
                                  {Bool}
                                  (equalsInteger 0 index)
                                  True
                                  False)
                               {all dead. Vote}
                               (/\dead -> VoteNo)
                               (/\dead ->
                                  Bool_match
                                    (ifThenElse
                                       {Bool}
                                       (equalsInteger 1 index)
                                       True
                                       False)
                                    {all dead. Vote}
                                    (/\dead -> VoteYes)
                                    (/\dead ->
                                       Bool_match
                                         (ifThenElse
                                            {Bool}
                                            (equalsInteger 2 index)
                                            True
                                            False)
                                         {all dead. Vote}
                                         (/\dead -> Abstain)
                                         (/\dead ->
                                            traceError
                                              {Vote}
                                              reconstructCaseError)
                                         {all dead. dead})
                                    {all dead. dead})
                               {all dead. dead}))
                       (headList {data} l))
                    (`$fUnsafeFromDataNil_$cunsafeFromBuiltinData`
                       {ProposalProcedure}
                       (\(d : data) ->
                          let
                            !tup : pair integer (list data) = unConstrData d
                            !index : integer = fstPair {integer} {list data} tup
                            !args : list data
                              = sndPair {integer} {list data} tup
                          in
                          Bool_match
                            (ifThenElse
                               {Bool}
                               (equalsInteger 0 index)
                               True
                               False)
                            {all dead. ProposalProcedure}
                            (/\dead ->
                               let
                                 !l : list data = tailList {data} args
                               in
                               ProposalProcedure
                                 (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                    {bytestring}
                                    {(\k v -> List (Tuple2 k v))
                                       bytestring
                                       integer}
                                    unBData
                                    `$fUnsafeFromDataValue`
                                    (headList {data} args))
                                 (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                    (headList {data} l))
                                 (let
                                   !tup : pair integer (list data)
                                     = unConstrData
                                         (headList {data} (tailList {data} l))
                                   !index : integer
                                     = fstPair {integer} {list data} tup
                                   !args : list data
                                     = sndPair {integer} {list data} tup
                                 in
                                 Bool_match
                                   (ifThenElse
                                      {Bool}
                                      (equalsInteger 0 index)
                                      True
                                      False)
                                   {all dead. GovernanceAction}
                                   (/\dead ->
                                      ParameterChange
                                        (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                           {GovernanceActionId}
                                           `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                           (headList {data} args))
                                        (headList
                                           {data}
                                           (tailList {data} args)))
                                   (/\dead ->
                                      Bool_match
                                        (ifThenElse
                                           {Bool}
                                           (equalsInteger 1 index)
                                           True
                                           False)
                                        {all dead. GovernanceAction}
                                        (/\dead ->
                                           HardForkInitiation
                                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                {GovernanceActionId}
                                                `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                                (headList {data} args))
                                             (let
                                               !tup : pair integer (list data)
                                                 = unConstrData
                                                     (headList
                                                        {data}
                                                        (tailList {data} args))
                                               !index : integer
                                                 = fstPair
                                                     {integer}
                                                     {list data}
                                                     tup
                                               !args : list data
                                                 = sndPair
                                                     {integer}
                                                     {list data}
                                                     tup
                                             in
                                             Bool_match
                                               (ifThenElse
                                                  {Bool}
                                                  (equalsInteger 0 index)
                                                  True
                                                  False)
                                               {all dead. ProtocolVersion}
                                               (/\dead ->
                                                  ProtocolVersion
                                                    (unIData
                                                       (headList {data} args))
                                                    (unIData
                                                       (headList
                                                          {data}
                                                          (tailList
                                                             {data}
                                                             args))))
                                               (/\dead ->
                                                  traceError
                                                    {ProtocolVersion}
                                                    reconstructCaseError)
                                               {all dead. dead}))
                                        (/\dead ->
                                           Bool_match
                                             (ifThenElse
                                                {Bool}
                                                (equalsInteger 2 index)
                                                True
                                                False)
                                             {all dead. GovernanceAction}
                                             (/\dead ->
                                                TreasuryWithdrawals
                                                  (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                                     {Credential}
                                                     {(\k v ->
                                                         List (Tuple2 k v))
                                                        bytestring
                                                        ((\k v ->
                                                            List (Tuple2 k v))
                                                           bytestring
                                                           integer)}
                                                     `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                     `$fUnsafeFromDataValue`
                                                     (headList {data} args)))
                                             (/\dead ->
                                                Bool_match
                                                  (ifThenElse
                                                     {Bool}
                                                     (equalsInteger 3 index)
                                                     True
                                                     False)
                                                  {all dead. GovernanceAction}
                                                  (/\dead ->
                                                     NoConfidence
                                                       (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                          {GovernanceActionId}
                                                          `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                                          (headList
                                                             {data}
                                                             args)))
                                                  (/\dead ->
                                                     Bool_match
                                                       (ifThenElse
                                                          {Bool}
                                                          (equalsInteger
                                                             4
                                                             index)
                                                          True
                                                          False)
                                                       {all dead.
                                                          GovernanceAction}
                                                       (/\dead ->
                                                          let
                                                            !l : list data
                                                              = tailList
                                                                  {data}
                                                                  args
                                                          in
                                                          NewCommittee
                                                            (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                               {GovernanceActionId}
                                                               `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                                               (headList
                                                                  {data}
                                                                  args))
                                                            (`$fUnsafeFromDataNil_$cunsafeFromBuiltinData`
                                                               {Credential}
                                                               `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                               (headList
                                                                  {data}
                                                                  l))
                                                            (let
                                                              !tup :
                                                                 pair
                                                                   integer
                                                                   (list data)
                                                                = unConstrData
                                                                    (headList
                                                                       {data}
                                                                       (tailList
                                                                          {data}
                                                                          l))
                                                              !index : integer
                                                                = fstPair
                                                                    {integer}
                                                                    {list data}
                                                                    tup
                                                              !args : list data
                                                                = sndPair
                                                                    {integer}
                                                                    {list data}
                                                                    tup
                                                            in
                                                            Bool_match
                                                              (ifThenElse
                                                                 {Bool}
                                                                 (equalsInteger
                                                                    0
                                                                    index)
                                                                 True
                                                                 False)
                                                              {all dead.
                                                                 Committee}
                                                              (/\dead ->
                                                                 Committee
                                                                   (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                                                      {Credential}
                                                                      {integer}
                                                                      `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                                      unIData
                                                                      (headList
                                                                         {data}
                                                                         args))
                                                                   (let
                                                                     !x :
                                                                        data
                                                                       = headList
                                                                           {data}
                                                                           (tailList
                                                                              {data}
                                                                              args)
                                                                   in
                                                                   Tuple2_match
                                                                     {integer}
                                                                     {integer}
                                                                     (let
                                                                       !tup :
                                                                          pair
                                                                            integer
                                                                            (list
                                                                               data)
                                                                         = unConstrData
                                                                             x
                                                                       !index :
                                                                          integer
                                                                         = fstPair
                                                                             {integer}
                                                                             {list
                                                                                data}
                                                                             tup
                                                                       !args :
                                                                          list
                                                                            data
                                                                         = sndPair
                                                                             {integer}
                                                                             {list
                                                                                data}
                                                                             tup
                                                                     in
                                                                     Bool_match
                                                                       (ifThenElse
                                                                          {Bool}
                                                                          (equalsInteger
                                                                             0
                                                                             index)
                                                                          True
                                                                          False)
                                                                       {all dead.
                                                                          Tuple2
                                                                            integer
                                                                            integer}
                                                                       (/\dead ->
                                                                          Tuple2
                                                                            {integer}
                                                                            {integer}
                                                                            (unIData
                                                                               (headList
                                                                                  {data}
                                                                                  args))
                                                                            (unIData
                                                                               (headList
                                                                                  {data}
                                                                                  (tailList
                                                                                     {data}
                                                                                     args))))
                                                                       (/\dead ->
                                                                          traceError
                                                                            {Tuple2
                                                                               integer
                                                                               integer}
                                                                            reconstructCaseError)
                                                                       {all dead.
                                                                          dead})
                                                                     {Rational}
                                                                     (\(a :
                                                                          integer)
                                                                       (b :
                                                                          integer) ->
                                                                        unsafeRatio
                                                                          a
                                                                          b)))
                                                              (/\dead ->
                                                                 traceError
                                                                   {Committee}
                                                                   reconstructCaseError)
                                                              {all dead. dead}))
                                                       (/\dead ->
                                                          Bool_match
                                                            (ifThenElse
                                                               {Bool}
                                                               (equalsInteger
                                                                  5
                                                                  index)
                                                               True
                                                               False)
                                                            {all dead.
                                                               GovernanceAction}
                                                            (/\dead ->
                                                               NewConstitution
                                                                 (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                                    {GovernanceActionId}
                                                                    `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                                                    (headList
                                                                       {data}
                                                                       args))
                                                                 (let
                                                                   !tup :
                                                                      pair
                                                                        integer
                                                                        (list
                                                                           data)
                                                                     = unConstrData
                                                                         (headList
                                                                            {data}
                                                                            (tailList
                                                                               {data}
                                                                               args))
                                                                   !index :
                                                                      integer
                                                                     = fstPair
                                                                         {integer}
                                                                         {list
                                                                            data}
                                                                         tup
                                                                   !args :
                                                                      list data
                                                                     = sndPair
                                                                         {integer}
                                                                         {list
                                                                            data}
                                                                         tup
                                                                 in
                                                                 Bool_match
                                                                   (ifThenElse
                                                                      {Bool}
                                                                      (equalsInteger
                                                                         0
                                                                         index)
                                                                      True
                                                                      False)
                                                                   {all dead.
                                                                      Maybe
                                                                        bytestring}
                                                                   (/\dead ->
                                                                      `$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                                        {bytestring}
                                                                        unBData
                                                                        (headList
                                                                           {data}
                                                                           args))
                                                                   (/\dead ->
                                                                      traceError
                                                                        {Maybe
                                                                           bytestring}
                                                                        reconstructCaseError)
                                                                   {all dead.
                                                                      dead}))
                                                            (/\dead ->
                                                               Bool_match
                                                                 (ifThenElse
                                                                    {Bool}
                                                                    (equalsInteger
                                                                       6
                                                                       index)
                                                                    True
                                                                    False)
                                                                 {all dead.
                                                                    GovernanceAction}
                                                                 (/\dead ->
                                                                    InfoAction)
                                                                 (/\dead ->
                                                                    traceError
                                                                      {GovernanceAction}
                                                                      reconstructCaseError)
                                                                 {all dead.
                                                                    dead})
                                                            {all dead. dead})
                                                       {all dead. dead})
                                                  {all dead. dead})
                                             {all dead. dead})
                                        {all dead. dead})
                                   {all dead. dead}))
                            (/\dead ->
                               traceError
                                 {ProposalProcedure}
                                 reconstructCaseError)
                            {all dead. dead})
                       (headList {data} l))
                    (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                       {(\k v -> List (Tuple2 k v))
                          bytestring
                          ((\k v -> List (Tuple2 k v)) bytestring integer)}
                       `$fUnsafeFromDataValue`
                       (headList {data} l))
                    (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                       {(\k v -> List (Tuple2 k v))
                          bytestring
                          ((\k v -> List (Tuple2 k v)) bytestring integer)}
                       `$fUnsafeFromDataValue`
                       (headList {data} (tailList {data} l))))
               (/\dead -> traceError {TxInfo} reconstructCaseError)
               {all dead. dead})
             (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                (headList {data} (tailList {data} args))))
        (/\dead -> traceError {ScriptContext} reconstructCaseError)
        {all dead. dead})
      {Unit}
      (\(txi : TxInfo) (ds : ScriptPurpose) ->
         Bool_match
           (ifThenElse
              {Bool}
              (equalsInteger
                 0
                 (modInteger
                    (let
                      !eta : List TxOut
                        = TxInfo_match
                            txi
                            {List TxOut}
                            (\(ds : List TxInInfo)
                              (ds : List TxInInfo)
                              (ds : List TxOut)
                              (ds :
                                 (\k v -> List (Tuple2 k v))
                                   bytestring
                                   ((\k v -> List (Tuple2 k v))
                                      bytestring
                                      integer))
                              (ds :
                                 (\k v -> List (Tuple2 k v))
                                   bytestring
                                   ((\k v -> List (Tuple2 k v))
                                      bytestring
                                      integer))
                              (ds : List TxCert)
                              (ds :
                                 (\k v -> List (Tuple2 k v)) Credential integer)
                              (ds : Interval integer)
                              (ds : List bytestring)
                              (ds :
                                 (\k v -> List (Tuple2 k v)) ScriptPurpose data)
                              (ds : (\k v -> List (Tuple2 k v)) bytestring data)
                              (ds : bytestring)
                              (ds :
                                 (\k v -> List (Tuple2 k v))
                                   Voter
                                   ((\k v -> List (Tuple2 k v))
                                      GovernanceActionId
                                      Vote))
                              (ds : List ProposalProcedure)
                              (ds :
                                 Maybe
                                   ((\k v -> List (Tuple2 k v))
                                      bytestring
                                      ((\k v -> List (Tuple2 k v))
                                         bytestring
                                         integer)))
                              (ds :
                                 Maybe
                                   ((\k v -> List (Tuple2 k v))
                                      bytestring
                                      ((\k v -> List (Tuple2 k v))
                                         bytestring
                                         integer))) ->
                               ds)
                    in
                    go eta)
                    2))
              True
              False)
           {all dead. Unit}
           (/\dead -> Unit)
           (/\dead -> error {Unit})
           {all dead. dead}))
  (Constr 0
     [ Constr 0
         [ List []
         , List []
         , List
             [ Constr 0
                 [ Constr 0 [Constr 0 [B #], Constr 1 []]
                 , Map [(B #, Map [(B #, I 1)])]
                 , Constr 0 []
                 , Constr 1 [] ] ]
         , Map []
         , Map []
         , List []
         , Map []
         , Constr 0
             [ Constr 0 [Constr 0 [], Constr 1 []]
             , Constr 0 [Constr 2 [], Constr 1 []] ]
         , List []
         , Map []
         , Map []
         , Constr 0 [B #]
         , Map []
         , List []
         , Constr 1 []
         , Constr 1 [] ]
     , Constr 1 [Constr 0 [Constr 0 [B #], I 0]] ])